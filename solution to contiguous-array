// Time Complexity : worst case is O(n)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

// take a running sum of the array, store indices of the first occurence of a particular value of rsum. if you encounter the same rsum again, check difference between the index and its first index.
// if the value is greater than max, update max

class Solution {
    public int findMaxLength(int[] nums) {
        if(nums == null || nums.length == 0) {
            return 0;
        }
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, -1);
        int rSum = 0;
        int max = 0;
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] == 0) {
                rSum -= 1;
            } else {
                rSum += 1;
            }
            if(map.containsKey(rSum)) {
                max = Math.max(max, i - map.get(rSum));
            } else {
                map.put(rSum, i);
            }
        }
        return max;
    }
}
