//Time complexity: O(n)
//space complexity: O(n)
//successfully executed on leetcode

class SubarraySumEqualsK {
    public int subarraySum(int[] nums, int k) {
        HashMap<Integer,Integer> map = new HashMap<>();
        map.put(0,1);
        int rSum=0;
        int count=0;
        for(int i=0; i<nums.length;i++){
            
            //find running count
            rSum = rSum+nums[i];
            if(map.containsKey(rSum-k)){
                //increment count if rSum-k exists
                count= count+map.get(rSum-k);
            }

            if(!map.containsKey(rSum)){
                //if rSum doesnot exist add it
                map.put(rSum,1);
            }
          
            else{ 
                //if rSum exists increment occurence
                map.put(rSum, map.get(rSum)+1);
            }

        }
        return count;
    }
}
