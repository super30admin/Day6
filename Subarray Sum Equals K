// Time Complexity : O(n) where n - size of nums
// Space Complexity : O(n) where n - size of nums
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

Solution 1 - Brute force - O(n^2) SC - O(1)

public int subarraySum(int[] nums, int k) {
        int count = 0;
        
        for(int i = 0; i < nums.length; i++)
        {
            int sum = 0;
            for(int j = i; j < nums.length; j++)
            {
                sum += nums[j];
                
                if(sum == k)
                    count++;
            }
        }
        return count;
    }
    
-------------------------------------------------------
Solution 2 - Hashing - TC - O(n) SC - O(n)

class Solution {
    public int subarraySum(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        
        int count = 0;
        int rsum = 0;
        
        for(int val : nums)
        {
            rsum += val;
            if(map.containsKey(rsum - k))
            {
                count += map.get(rsum - k);
            }
            map.put(rsum, map.getOrDefault(rsum, 0) + 1);
        }
        return count;
    }
}
