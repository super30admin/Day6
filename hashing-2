class Solution {
    public int subarraySum(int[] nums, int k) {
        
        HashMap<Integer, Integer> map = new HashMap<>();
        
        int runningSum = 0;
        map.put(runningSum,1);
        int result =0;
       
        for(int i=0; i<nums.length; i++)
        {
            runningSum += nums[i];
            if(map.containsKey(runningSum - k))
            {
                result += map.get(runningSum - k);
            }
            map.put(runningSum, map.getOrDefault(runningSum, 0)+1);
        }
        
        return result;
    }
}

class Solution {
    public int findMaxLength(int[] nums) {
        
        HashMap<Integer,Integer> map = new HashMap<>();
        int max = 0;
        int count =0;
        map.put(0,-1);
        int startIndex=0;
        int endIndex =0;
        
        for(int i=0; i<nums.length; i++)
        {
            if(nums[i] == 1)
            {
                count = count +1;
            }
            else
            {
                count = count -1;
            }
            if(map.containsKey(count))
            {
                int temp = i - map.get(count);
                if(temp > max)
                {
                    startIndex = map.get(count)+1;
                    endIndex = i+1;
                    max = temp;
                }
        
            }
            else
            {
                map.put(count,i);
            }
        }
       int[] result = Arrays.copyOfRange(nums, startIndex, endIndex);
        display(result);
        return max;
    }
    
    public void display(int[] arr)
    {
        for(int i=0; i<arr.length; i++)
        {
            System.out.print(arr[i]+" ");
        }
        System.out.println(" ");
    }
}

class Solution {
    public int longestPalindrome(String s) {
        HashSet<Character> map = new HashSet<>();
        int count=0;
        
        for(int i=0; i<s.length(); i++)
        {
            char c = s.charAt(i);
           
            if(map.contains(c))
            {
                count += 2;
                map.remove(c);
            }
            else
            {
                map.add(c);
            }
        }
        if(map.size() !=0)
        {
            count++;
        }
        return count;
    }
}
