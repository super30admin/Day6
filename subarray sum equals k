// O(n) time and space complexity
// ran on leetcode


class Solution {
    public int subarraySum(int[] nums, int k) {
        int length = nums.length;
        HashMap < Integer, Integer > map = new HashMap <>();
        map.put(0,1);
        int sum=0;
        int count=0;
        int keep =0;
        for (int i=0;i<length;i++){
            sum=sum+nums[i];
            keep = sum-k;
         if (map.containsKey(keep)){
               count = count + map.get(keep);
           }
         
           if (map.containsKey(sum)){
               map.put(sum,map.get(sum)+1);
           }
           else{
               map.put(sum,1);
           }
           

        }
        return count;

    }
}
