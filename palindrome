// ran on leetcode
// O(n) time and space time complexity

class Solution {
    public int longestPalindrome(String s) {
        int count =0;
        int length= s.length();
        String x="";
        HashMap <Character, Integer> map= new HashMap<>();
        for (int i=0;i<length;i++){
            if (map.containsKey(s.charAt(i))){
                map.put(s.charAt(i),map.get(s.charAt(i))+1);
            }
            else{
                map.put(s.charAt(i),1);
                x=x+s.charAt(i);
            }
        }
        int len=x.length();
       int add=0;
        for (int j=0;j<len;j++){
            if (map.get(x.charAt(j))%2==0){
                count= count + map.get(x.charAt(j));

            }
            else if(map.get(x.charAt(j))%2==1){
                count=count+ map.get(x.charAt(j))-1;
                add=1;
            }
        }
        return count+add ;
         
        
        }}

      

      
